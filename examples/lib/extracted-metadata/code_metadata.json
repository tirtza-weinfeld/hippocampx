{
  "simple_bisect_left": {
    "name": "simple_bisect_left",
    "type": "function",
    "language": "python",
    "file": "examples/code/binary_search.py",
    "line": 5,
    "signature": "def simple_bisect_left(a, x):",
    "parameters": [],
    "return_type": "",
    "return_description": "",
    "description": "Return the index where to insert item x in list a, assuming a is sorted.",
    "code": "def simple_bisect_left(a, x):\n    lo, hi = 0, len(a)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if a[mid] < x:\n            lo = mid + 1\n        else:  \n            hi = mid  \n    return lo",
    "links": [],
    "variables": [
      {
        "name": "mid",
        "description": "the middle index of the array",
        "type": "variable"
      }
    ],
    "expressions": [
      {
        "expression": "(lo + hi) // 2",
        "description": "round down to the nearest integer",
        "type": "expression"
      }
    ]
  },
  "simple_bisect_right": {
    "name": "simple_bisect_right",
    "type": "function",
    "language": "python",
    "file": "examples/code/binary_search.py",
    "line": 33,
    "signature": "def simple_bisect_right(a, x):",
    "parameters": [],
    "return_type": "",
    "return_description": "",
    "description": "Return the index where to insert item x in list a, assuming a is sorted.",
    "code": "def simple_bisect_right(a, x):\n    lo, hi = 0, len(a)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if x < a[mid]:\n            hi = mid\n        else: \n            lo = mid + 1 \n    return lo",
    "links": [],
    "variables": [],
    "expressions": []
  },
  "searchRange": {
    "name": "searchRange",
    "type": "function",
    "language": "python",
    "file": "examples/code/binary_search.py",
    "line": 54,
    "signature": "def searchRange(nums: list[int], target: int) -> list[int]:",
    "parameters": [],
    "return_type": "list[int]",
    "return_description": "",
    "description": "",
    "code": "def searchRange(nums: list[int], target: int) -> list[int]:\n    start = bisect_left(nums, target)\n    if start < len(nums) and nums[start] == target:\n        return start, bisect_right(nums, target) - 1\n    return -1, -1",
    "links": [],
    "variables": [],
    "expressions": []
  }
}