---
description: 
globs: 
alwaysApply: true
---
**HippocampX Coding Assistant Rules (June 2025)**
*Purpose:* Enforce cutting-edge, professional, context-aware code and advice in every session.

1. **Inspect Before Acting**
   Always review the repo’s file structure, existing patterns, and configurations before suggesting changes.

2. **Use Only Modern APIs & Frameworks**

   * React 19+, Next.js 15+, Tailwind 4.1+ (no config files; use `@theme` in CSS)
   * ESM modules only; never introduce deprecated packages or CommonJS if ESM is available.

3. **Professional Mindset**

   * Think and act as a seasoned developer and consultant.
   * Communicate clearly, respectfully, and confidently.

4. **Type Safety First**

   * Ban `any` and avoid manual type definitions for package-exported entities.
   * Always import types from the canonical package; if a type isn’t exposed, pause and ask.

5. **File & Language Conventions**

   * Never use `.js` or `.jsx`—all source and config files must be `.ts` or `.tsx`.
   * Ensure file extensions match content (TSX for React components).

6. **Strict Package Management & Tooling**

   * Use `pnpm` for all installs, updates, and scripts—never `npm` or `yarn`.
   * Check `package.json` for existing scripts before adding or modifying.
   * Leverage TypeScript 5.4+, Vite/Esbuild, ESLint 9+, Prettier, Vitest, and Playwright.

7. **No Speculation or Redundancy**

   * Don’t offer conditional advice (“if X, then Y”) when you can inspect the codebase.
   * If information isn’t determinable, ask concise clarification.

8. **Obey Specialized Guides**

   * **Python:** follow `python.mdc` syntax guidelines (3.13.5+)
   * **Plugins:** follow `plugins.mdc` development rules
   * **React/Next.js:** follow `react-nextjs.mdc` (Canary APIs, Server Actions, etc.)
   * **Styling:** follow `styling.mdc` (OKLCH tokens, container queries, no config files)

9. **Security & Performance**

   * Enforce input validation, CSP headers, and secure dependencies.
   * Apply lazy loading, code-splitting, and modern caching strategies.

10. **Accessibility & Responsiveness**

    * Meet WCAG 2.1 AA+: semantic markup and ARIA roles.
    * Use container queries and fluid layouts across all breakpoints.

11. **Testing & Test Structure**

    * **Test-First Development:** write each unit test before implementation—tests exist to capture requirements and drive correct code, not merely to increase coverage.
    * **Recommended Libraries:**

      * **React/Next.js/TypeScript:** Vitest + Testing Library (`@testing-library/react`, `@testing-library/jest-dom`)
      * **Python:** pytest + `pytest-cov` + `pytest-mock`
    * **Directory & Naming (mirror your source):**

      * For anything under `src/components/...`, tests in `tests/components/...` (e.g. `tests/components/ui/Button.test.tsx`).
      * For code in `src/lib/...` (or any helper folder), tests in `tests/lib/...` (e.g. `tests/lib/formatDate.test.ts`).
      * For hooks/plugins in `src/hooks/...` or `src/plugins/...`, tests in `tests/hooks/...` or `tests/plugins/...`.
      * If a module lives outside these top-level folders, co-locate its test alongside the file (e.g. `src/special/thing.ts` → `src/special/thing.test.ts`).
      * E2E specs live under `e2e/` at project root.
      * Use `*.test.tsx` for React, `*.test.ts` for other TS, and `test_*.py` for Python.
    * **Framework & CI Integration:**

      * **Vitest:** configure `jsdom`, globals, and coverage in `vitest.config.ts`.
      * **Playwright:** store E2E specs in `e2e/` with `playwright.config.ts`.
      * **pytest:** configure markers and coverage in `pytest.ini`.
      * Enforce ≥ 90 % coverage and gate PRs on passing unit, component, and E2E tests.



12. **Script & Config Verification**

    * Before suggesting or running any script, confirm related commands and dependencies exist in `package.json`.
    * Avoid duplicates; update existing entries rather than re-adding.

---

*In short:* inspect first, think and act like a pro, code with up-to-date technologies, follow test-first development to ensure correct implementation, never assume knowledge, always verify against official documentation—and if in doubt, ask.
