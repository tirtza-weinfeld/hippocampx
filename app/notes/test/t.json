{
    "123-best-time-to-buy-and-sell-stock-iii": {
        "title": "Best Time to Buy and Sell Stock III",
        "definition": "Given a list of daily stock prices `prices`; at most **two** transactions are allowed (cannot overlap). Return the maximum total profit.",
        "leetcode": "https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/",
        "difficulty": "hard",
        "topics": [ "Dynamic Programming","Array"],
        "solutions": {
            "dp.py": {
                "code": "def best_time_to_buy_and_sell_stock_III(prices: list[int]) -> int:\n    t1_cost = t2_cost = float(\"inf\")\n    t1_profit = t2_profit = 0\n\n    for p in prices:\n\n        # First trade\n        t1_cost = min(t1_cost, p) \n        t1_profit = max(t1_profit, p - t1_cost)\n\n        # Second trade\n        t2_cost = min(t2_cost, p - t1_profit)\n        t2_profit = max(t2_profit, p - t2_cost)\n\n    return t2_profit",
                "intuition": "cost profit tracking",
                "variables": {
                    "t1_cost": "cost of first trade",
                    "t1_profit": "profit of first trade",
                    "t2_cost": "cost of second trade",
                    "t2_profit": "profit of second trade"
                },
                "expressions": {
                    "p - t1_profit": "money you'd need now if earlier profit covered part of this buy"
                }
            },
            "state.py": {
                "code": "def best_time_to_buy_and_sell_stock_III_hold_sell_states(prices: list[int]) -> int:\n    hold1 = hold2 = float(\"-inf\")\n    sell1 = sell2 = 0\n\n    for p in prices:\n        hold1 = max(hold1, -p)\n        sell1 = max(sell1, hold1 + p)\n        hold2 = max(hold2, sell1 - p)\n        sell2 = max(sell2, hold2 + p)\n    return sell2",
                "intuition": "hold sell states",
                "variables": {
                    "hold1": "money you'd have if holding first stock",
                    "sell1": "money you'd have if not holding first stock"
                },
                "expressions": {
                    "hold1 = hold2 = float(\"-inf\")": "money you'd have if holding first stock",
                    "sell1 = sell2 = 0": "money you'd have if not holding first stock",
                    "hold1 = max(hold1, -p)": "buy first stock",
                    "sell1 = max(sell1, hold1 + p)": "sell first stock",
                    "hold2 = max(hold2, sell1 - p)": "buy second stock",
                    "sell2 = max(sell2, hold2 + p)": "sell second stock"
                }
            }
        }
    }
}