{
  "problems/265-paint-house-ii/top-down.py": [
    {"range": {"start": {"line": 17, "character": 27}, "end": {"line": 17, "character": 64}}, "nameRange": {"start": {"line": 17, "character": 27}, "end": {"line": 17, "character": 64}}, "qname": "problems.265-paint-house-ii.top-down:Solution.minCostII.dp.costs[i][c] + (m2 if c == c1 else m1)", "kind": "expression"},
    {"range": {"start": {"line": 12, "character": 16}, "end": {"line": 12, "character": 42}}, "nameRange": {"start": {"line": 12, "character": 16}, "end": {"line": 12, "character": 42}}, "qname": "problems.265-paint-house-ii.top-down:Solution.minCostII.dp.for c, v in enumerate(nxt)", "kind": "expression"}
  ],
  "problems/1293-shortest-path-in-a-grid-with-obstacles-elimination/dijkstra.py": [
    {"range": {"start": {"line": 25, "character": 20}, "end": {"line": 25, "character": 66}}, "nameRange": {"start": {"line": 25, "character": 20}, "end": {"line": 25, "character": 66}}, "qname": "problems.1293-shortest-path-in-a-grid-with-obstacles-elimination.dijkstra:shortest_path_in_a_grid_with_obstacles_elimination.heapq.heappush(pq, (steps + 1, nr, nc, new_k))", "kind": "expression"},
    {"range": {"start": {"line": 13, "character": 29}, "end": {"line": 13, "character": 46}}, "nameRange": {"start": {"line": 13, "character": 29}, "end": {"line": 13, "character": 46}}, "qname": "problems.1293-shortest-path-in-a-grid-with-obstacles-elimination.dijkstra:shortest_path_in_a_grid_with_obstacles_elimination.heapq.heappop(pq)", "kind": "expression"},
    {"range": {"start": {"line": 18, "character": 11}, "end": {"line": 18, "character": 30}}, "nameRange": {"start": {"line": 18, "character": 11}, "end": {"line": 18, "character": 30}}, "qname": "problems.1293-shortest-path-in-a-grid-with-obstacles-elimination.dijkstra:shortest_path_in_a_grid_with_obstacles_elimination.k_rem < max_k[r][c]", "kind": "expression"}
  ],
  "problems/1293-shortest-path-in-a-grid-with-obstacles-elimination/a_star.py": [
    {"range": {"start": {"line": 28, "character": 20}, "end": {"line": 28, "character": 35}}, "nameRange": {"start": {"line": 28, "character": 20}, "end": {"line": 28, "character": 35}}, "qname": "problems.1293-shortest-path-in-a-grid-with-obstacles-elimination.a_star:shortest_path_in_a_grid_with_obstacles_elimination.new_remaining_k", "kind": "expression"},
    {"range": {"start": {"line": 29, "character": 36}, "end": {"line": 29, "character": 51}}, "nameRange": {"start": {"line": 29, "character": 36}, "end": {"line": 29, "character": 51}}, "qname": "problems.1293-shortest-path-in-a-grid-with-obstacles-elimination.a_star:shortest_path_in_a_grid_with_obstacles_elimination.new_remaining_k", "kind": "expression"},
    {"range": {"start": {"line": 30, "character": 84}, "end": {"line": 30, "character": 99}}, "nameRange": {"start": {"line": 30, "character": 84}, "end": {"line": 30, "character": 99}}, "qname": "problems.1293-shortest-path-in-a-grid-with-obstacles-elimination.a_star:shortest_path_in_a_grid_with_obstacles_elimination.new_remaining_k", "kind": "expression"},
    {"range": {"start": {"line": 23, "character": 8}, "end": {"line": 23, "character": 36}}, "nameRange": {"start": {"line": 23, "character": 8}, "end": {"line": 23, "character": 36}}, "qname": "problems.1293-shortest-path-in-a-grid-with-obstacles-elimination.a_star:shortest_path_in_a_grid_with_obstacles_elimination.if remaining_k < max_k[r][c]", "kind": "expression"}
  ],
  "problems/211-design-add-and-search-words-data-structure/solution.py": [
    {"range": {"start": {"line": 24, "character": 20}, "end": {"line": 24, "character": 43}}, "nameRange": {"start": {"line": 24, "character": 20}, "end": {"line": 24, "character": 43}}, "qname": "problems.211-design-add-and-search-words-data-structure.solution:WordDictionary.search.dfs.if k != self.END_MARKER", "kind": "expression"}
  ],
  "problems/133-clone-graph/solution.py": [
    {"range": {"start": {"line": 15, "character": 12}, "end": {"line": 15, "character": 30}}, "nameRange": {"start": {"line": 15, "character": 12}, "end": {"line": 15, "character": 30}}, "qname": "problems.133-clone-graph.solution:clone_graph.if n not in cloned", "kind": "expression"},
    {"range": {"start": {"line": 16, "character": 16}, "end": {"line": 16, "character": 39}}, "nameRange": {"start": {"line": 16, "character": 16}, "end": {"line": 16, "character": 39}}, "qname": "problems.133-clone-graph.solution:clone_graph.cloned[n] = Node(n.val)", "kind": "expression"},
    {"range": {"start": {"line": 17, "character": 16}, "end": {"line": 17, "character": 31}}, "nameRange": {"start": {"line": 17, "character": 16}, "end": {"line": 17, "character": 31}}, "qname": "problems.133-clone-graph.solution:clone_graph.queue.append(n)", "kind": "expression"},
    {"range": {"start": {"line": 18, "character": 12}, "end": {"line": 18, "character": 51}}, "nameRange": {"start": {"line": 18, "character": 12}, "end": {"line": 18, "character": 51}}, "qname": "problems.133-clone-graph.solution:clone_graph.cloned[cur].neighbors.append(cloned[n])", "kind": "expression"}
  ],
  "problems/547-number-of-provinces/solution.py": [
    {"range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 46}}, "nameRange": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 46}}, "qname": "problems.547-number-of-provinces.solution:Solution.findCircleNum.p = list(range(n := len(isConnected)))", "kind": "expression"},
    {"range": {"start": {"line": 8, "character": 12}, "end": {"line": 8, "character": 27}}, "nameRange": {"start": {"line": 8, "character": 12}, "end": {"line": 8, "character": 27}}, "qname": "problems.547-number-of-provinces.solution:Solution.findCircleNum.while x != p[x]", "kind": "expression"},
    {"range": {"start": {"line": 9, "character": 16}, "end": {"line": 9, "character": 30}}, "nameRange": {"start": {"line": 9, "character": 16}, "end": {"line": 9, "character": 30}}, "qname": "problems.547-number-of-provinces.solution:Solution.findCircleNum.p[x] = p[p[x]]", "kind": "expression"},
    {"range": {"start": {"line": 18, "character": 15}, "end": {"line": 18, "character": 50}}, "nameRange": {"start": {"line": 18, "character": 15}, "end": {"line": 18, "character": 50}}, "qname": "problems.547-number-of-provinces.solution:Solution.findCircleNum.sum(i == find(i) for i in range(n))", "kind": "expression"}
  ],
  "problems/416-partition-equal-subset-sum/solution.py": [
    {"range": {"start": {"line": 2, "character": 7}, "end": {"line": 2, "character": 31}}, "nameRange": {"start": {"line": 2, "character": 7}, "end": {"line": 2, "character": 31}}, "qname": "problems.416-partition-equal-subset-sum.solution:canPartition.(total := sum(nums)) & 1", "kind": "expression"}
  ],
  "problems/3-longest-substring-without-repeating-characters/solution.py": [
    {"range": {"start": {"line": 4, "character": 12}, "end": {"line": 4, "character": 36}}, "nameRange": {"start": {"line": 4, "character": 12}, "end": {"line": 4, "character": 36}}, "qname": "problems.3-longest-substring-without-repeating-characters.solution:longest_substring_without_repeating_characters.l = max(c_idx[c] + 1, l)", "kind": "expression"}
  ],
  "problems/215-kth-largest-element-in-an-array/solution.py": [
    {"range": {"start": {"line": 6, "character": 18}, "end": {"line": 6, "character": 35}}, "nameRange": {"start": {"line": 6, "character": 18}, "end": {"line": 6, "character": 35}}, "qname": "problems.215-kth-largest-element-in-an-array.solution:findKthLargest.heapreplace(h, x)", "kind": "expression"}
  ],
  "problems/198-house-robber/bottom-up-prefix.py": [
    {"range": {"start": {"line": 3, "character": 8}, "end": {"line": 3, "character": 36}}, "nameRange": {"start": {"line": 3, "character": 8}, "end": {"line": 3, "character": 36}}, "qname": "problems.198-house-robber.bottom-up-prefix:rob.h2, h1 = h1, max(h1, h2 + h)", "kind": "expression"}
  ],
  "problems/198-house-robber/top-down-suffix.py": [
    {"range": {"start": {"line": 7, "character": 22}, "end": {"line": 7, "character": 59}}, "nameRange": {"start": {"line": 7, "character": 22}, "end": {"line": 7, "character": 59}}, "qname": "problems.198-house-robber.top-down-suffix:rob.max(dp(i + 1), houses[i] + dp(i + 2))", "kind": "expression"}
  ],
  "problems/198-house-robber/bottom-up-suffix.py": [
    {"range": {"start": {"line": 2, "character": 13}, "end": {"line": 2, "character": 41}}, "nameRange": {"start": {"line": 2, "character": 13}, "end": {"line": 2, "character": 41}}, "qname": "problems.198-house-robber.bottom-up-suffix:rob.reversed(range(len(houses)))", "kind": "expression"}
  ],
  "problems/124-binary-tree-maximum-path-sum/solution.py": [
    {"range": {"start": {"line": 8, "character": 8}, "end": {"line": 8, "character": 42}}, "nameRange": {"start": {"line": 8, "character": 8}, "end": {"line": 8, "character": 42}}, "qname": "problems.124-binary-tree-maximum-path-sum.solution:binary_tree_maximum_path_sum.dfs.best = max(best, node.val + l + r)", "kind": "expression"},
    {"range": {"start": {"line": 9, "character": 8}, "end": {"line": 9, "character": 35}}, "nameRange": {"start": {"line": 9, "character": 8}, "end": {"line": 9, "character": 35}}, "qname": "problems.124-binary-tree-maximum-path-sum.solution:binary_tree_maximum_path_sum.dfs.return node.val + max(l, r)", "kind": "expression"}
  ],
  "problems/153-find-minimum-in-rotated-sorted-array/solution.py": [
    {"range": {"start": {"line": 6, "character": 12}, "end": {"line": 6, "character": 19}}, "nameRange": {"start": {"line": 6, "character": 12}, "end": {"line": 6, "character": 19}}, "qname": "problems.153-find-minimum-in-rotated-sorted-array.solution:find_minimum_in_rotated_sorted_array.r = mid", "kind": "expression"},
    {"range": {"start": {"line": 8, "character": 12}, "end": {"line": 8, "character": 23}}, "nameRange": {"start": {"line": 8, "character": 12}, "end": {"line": 8, "character": 23}}, "qname": "problems.153-find-minimum-in-rotated-sorted-array.solution:find_minimum_in_rotated_sorted_array.l = mid + 1", "kind": "expression"}
  ],
  "problems/53-maximum-subarray/solution.py": [
    {"range": {"start": {"line": 3, "character": 8}, "end": {"line": 3, "character": 43}}, "nameRange": {"start": {"line": 3, "character": 8}, "end": {"line": 3, "character": 43}}, "qname": "problems.53-maximum-subarray.solution:maximum_subarray.curr_sum = max(num, curr_sum + num)", "kind": "expression"}
  ],
  "problems/84-largest-rectangle-in-histogram/solution.py": [
    {"range": {"start": {"line": 1, "character": 4}, "end": {"line": 1, "character": 21}}, "nameRange": {"start": {"line": 1, "character": 4}, "end": {"line": 1, "character": 21}}, "qname": "problems.84-largest-rectangle-in-histogram.solution:largestRectangleArea.heights.append(0)", "kind": "expression"},
    {"range": {"start": {"line": 2, "character": 4}, "end": {"line": 2, "character": 16}}, "nameRange": {"start": {"line": 2, "character": 4}, "end": {"line": 2, "character": 16}}, "qname": "problems.84-largest-rectangle-in-histogram.solution:largestRectangleArea.stack = [-1]", "kind": "expression"},
    {"range": {"start": {"line": 4, "character": 34}, "end": {"line": 4, "character": 56}}, "nameRange": {"start": {"line": 4, "character": 34}, "end": {"line": 4, "character": 56}}, "qname": "problems.84-largest-rectangle-in-histogram.solution:largestRectangleArea.heights[stack[-1]] > h", "kind": "expression"},
    {"range": {"start": {"line": 8, "character": 4}, "end": {"line": 8, "character": 17}}, "nameRange": {"start": {"line": 8, "character": 4}, "end": {"line": 8, "character": 17}}, "qname": "problems.84-largest-rectangle-in-histogram.solution:largestRectangleArea.heights.pop()", "kind": "expression"}
  ],
  "problems/256-paint-house/vector.py": [
    {"range": {"start": {"line": 9, "character": 16}, "end": {"line": 9, "character": 31}}, "nameRange": {"start": {"line": 9, "character": 16}, "end": {"line": 9, "character": 31}}, "qname": "problems.256-paint-house.vector:Solution.minCost.dp.nxt = dp(i + 1)", "kind": "expression"}
  ],
  "problems/256-paint-house/scalar.py": [
    {"range": {"start": {"line": 10, "character": 20}, "end": {"line": 10, "character": 66}}, "nameRange": {"start": {"line": 10, "character": 20}, "end": {"line": 10, "character": 66}}, "qname": "problems.256-paint-house.scalar:Solution.minCost.dp.dp(i + 1, (c + 1) % 3), dp(i + 1, (c + 2) % 3)", "kind": "expression"}
  ],
  "problems/208-implement-trie-prefix-tree/solution.py": [
    {"range": {"start": {"line": 21, "character": 12}, "end": {"line": 21, "character": 36}}, "nameRange": {"start": {"line": 21, "character": 12}, "end": {"line": 21, "character": 36}}, "qname": "problems.208-implement-trie-prefix-tree.solution:Trie.insert.node = node.children[ch]", "kind": "expression"},
    {"range": {"start": {"line": 22, "character": 8}, "end": {"line": 22, "character": 23}}, "nameRange": {"start": {"line": 22, "character": 8}, "end": {"line": 22, "character": 23}}, "qname": "problems.208-implement-trie-prefix-tree.solution:Trie.insert.node.end = True", "kind": "expression"}
  ],
  "problems/1000-minimum-cost-to-merge-stones/solution.py": [
    {"range": {"start": {"line": 6, "character": 33}, "end": {"line": 6, "character": 50}}, "nameRange": {"start": {"line": 6, "character": 33}, "end": {"line": 6, "character": 50}}, "qname": "problems.1000-minimum-cost-to-merge-stones.solution:Solution.mergeStones.(r - l) % (K - 1)", "kind": "expression"},
    {"range": {"start": {"line": 11, "character": 67}, "end": {"line": 11, "character": 85}}, "nameRange": {"start": {"line": 11, "character": 67}, "end": {"line": 11, "character": 85}}, "qname": "problems.1000-minimum-cost-to-merge-stones.solution:Solution.mergeStones.dp.range(l, r, K - 1)", "kind": "expression"},
    {"range": {"start": {"line": 12, "character": 20}, "end": {"line": 12, "character": 29}}, "nameRange": {"start": {"line": 12, "character": 20}, "end": {"line": 12, "character": 29}}, "qname": "problems.1000-minimum-cost-to-merge-stones.solution:Solution.mergeStones.dp.default=0", "kind": "expression"}
  ],
  "problems/123-best-time-to-buy-and-sell-stock-iii/dp.py": [
    {"range": {"start": {"line": 12, "character": 31}, "end": {"line": 12, "character": 44}}, "nameRange": {"start": {"line": 12, "character": 31}, "end": {"line": 12, "character": 44}}, "qname": "problems.123-best-time-to-buy-and-sell-stock-iii.dp:best_time_to_buy_and_sell_stock_III.p - t1_profit", "kind": "expression"}
  ],
  "problems/123-best-time-to-buy-and-sell-stock-iii/state.py": [
    {"range": {"start": {"line": 1, "character": 4}, "end": {"line": 1, "character": 33}}, "nameRange": {"start": {"line": 1, "character": 4}, "end": {"line": 1, "character": 33}}, "qname": "problems.123-best-time-to-buy-and-sell-stock-iii.state:best_time_to_buy_and_sell_stock_III.hold1 = hold2 = float(\"-inf\")", "kind": "expression"},
    {"range": {"start": {"line": 2, "character": 4}, "end": {"line": 2, "character": 21}}, "nameRange": {"start": {"line": 2, "character": 4}, "end": {"line": 2, "character": 21}}, "qname": "problems.123-best-time-to-buy-and-sell-stock-iii.state:best_time_to_buy_and_sell_stock_III.sell1 = sell2 = 0", "kind": "expression"},
    {"range": {"start": {"line": 5, "character": 8}, "end": {"line": 5, "character": 30}}, "nameRange": {"start": {"line": 5, "character": 8}, "end": {"line": 5, "character": 30}}, "qname": "problems.123-best-time-to-buy-and-sell-stock-iii.state:best_time_to_buy_and_sell_stock_III.hold1 = max(hold1, -p)", "kind": "expression"},
    {"range": {"start": {"line": 6, "character": 8}, "end": {"line": 6, "character": 37}}, "nameRange": {"start": {"line": 6, "character": 8}, "end": {"line": 6, "character": 37}}, "qname": "problems.123-best-time-to-buy-and-sell-stock-iii.state:best_time_to_buy_and_sell_stock_III.sell1 = max(sell1, hold1 + p)", "kind": "expression"},
    {"range": {"start": {"line": 7, "character": 8}, "end": {"line": 7, "character": 37}}, "nameRange": {"start": {"line": 7, "character": 8}, "end": {"line": 7, "character": 37}}, "qname": "problems.123-best-time-to-buy-and-sell-stock-iii.state:best_time_to_buy_and_sell_stock_III.hold2 = max(hold2, sell1 - p)", "kind": "expression"},
    {"range": {"start": {"line": 8, "character": 8}, "end": {"line": 8, "character": 37}}, "nameRange": {"start": {"line": 8, "character": 8}, "end": {"line": 8, "character": 37}}, "qname": "problems.123-best-time-to-buy-and-sell-stock-iii.state:best_time_to_buy_and_sell_stock_III.sell2 = max(sell2, hold2 + p)", "kind": "expression"}
  ],
  "problems/347-top-k-frequent-elements/heap-nlargets.py": [
    {"range": {"start": {"line": 5, "character": 29}, "end": {"line": 5, "character": 40}}, "nameRange": {"start": {"line": 5, "character": 29}, "end": {"line": 5, "character": 40}}, "qname": "problems.347-top-k-frequent-elements.heap-nlargets:topKFrequent.freq.keys()", "kind": "expression"},
    {"range": {"start": {"line": 5, "character": 42}, "end": {"line": 5, "character": 54}}, "nameRange": {"start": {"line": 5, "character": 42}, "end": {"line": 5, "character": 54}}, "qname": "problems.347-top-k-frequent-elements.heap-nlargets:topKFrequent.key=freq.get", "kind": "expression"}
  ],
  "problems/841-keys-and-rooms/solution.py": [
    {"range": {"start": {"line": 3, "character": 37}, "end": {"line": 3, "character": 48}}, "nameRange": {"start": {"line": 3, "character": 37}, "end": {"line": 3, "character": 48}}, "qname": "problems.841-keys-and-rooms.solution:Solution.canVisitAllRooms.stack = [0]", "kind": "expression"},
    {"range": {"start": {"line": 4, "character": 8}, "end": {"line": 4, "character": 22}}, "nameRange": {"start": {"line": 4, "character": 8}, "end": {"line": 4, "character": 22}}, "qname": "problems.841-keys-and-rooms.solution:Solution.canVisitAllRooms.seen[0] = True", "kind": "expression"},
    {"range": {"start": {"line": 5, "character": 8}, "end": {"line": 5, "character": 19}}, "nameRange": {"start": {"line": 5, "character": 8}, "end": {"line": 5, "character": 19}}, "qname": "problems.841-keys-and-rooms.solution:Solution.canVisitAllRooms.while stack", "kind": "expression"},
    {"range": {"start": {"line": 7, "character": 16}, "end": {"line": 7, "character": 32}}, "nameRange": {"start": {"line": 7, "character": 16}, "end": {"line": 7, "character": 32}}, "qname": "problems.841-keys-and-rooms.solution:Solution.canVisitAllRooms.if not seen[key]", "kind": "expression"},
    {"range": {"start": {"line": 9, "character": 20}, "end": {"line": 9, "character": 37}}, "nameRange": {"start": {"line": 9, "character": 20}, "end": {"line": 9, "character": 37}}, "qname": "problems.841-keys-and-rooms.solution:Solution.canVisitAllRooms.stack.append(key)", "kind": "expression"}
  ],
  "problems/212-word-search-ii/solution.py": [
    {"range": {"start": {"line": 5, "character": 12}, "end": {"line": 5, "character": 41}}, "nameRange": {"start": {"line": 5, "character": 12}, "end": {"line": 5, "character": 41}}, "qname": "problems.212-word-search-ii.solution:word_search_II.node = node.setdefault(c, {})", "kind": "expression"},
    {"range": {"start": {"line": 12, "character": 8}, "end": {"line": 12, "character": 22}}, "nameRange": {"start": {"line": 12, "character": 8}, "end": {"line": 12, "character": 22}}, "qname": "problems.212-word-search-ii.solution:word_search_II.if \"$\" in node", "kind": "expression"},
    {"range": {"start": {"line": 13, "character": 12}, "end": {"line": 13, "character": 37}}, "nameRange": {"start": {"line": 13, "character": 12}, "end": {"line": 13, "character": 37}}, "qname": "problems.212-word-search-ii.solution:word_search_II.res.append(node.pop(\"$\"))", "kind": "expression"},
    {"range": {"start": {"line": 18, "character": 8}, "end": {"line": 18, "character": 19}}, "nameRange": {"start": {"line": 18, "character": 8}, "end": {"line": 18, "character": 19}}, "qname": "problems.212-word-search-ii.solution:word_search_II.if not node", "kind": "expression"},
    {"range": {"start": {"line": 22, "character": 4}, "end": {"line": 22, "character": 8}}, "nameRange": {"start": {"line": 22, "character": 4}, "end": {"line": 22, "character": 8}}, "qname": "problems.212-word-search-ii.solution:word_search_II.[dfs", "kind": "expression"},
    {"range": {"start": {"line": 14, "character": 8}, "end": {"line": 14, "character": 24}}, "nameRange": {"start": {"line": 14, "character": 8}, "end": {"line": 14, "character": 24}}, "qname": "problems.212-word-search-ii.solution:word_search_II.board[i][j] = \"#", "kind": "expression"},
    {"range": {"start": {"line": 17, "character": 8}, "end": {"line": 17, "character": 23}}, "nameRange": {"start": {"line": 17, "character": 8}, "end": {"line": 17, "character": 23}}, "qname": "problems.212-word-search-ii.solution:word_search_II.board[i][j] = c", "kind": "expression"}
  ],
  "problems/36-valid-sudoku/solution.py": [
    {"range": {"start": {"line": 8, "character": 12}, "end": {"line": 8, "character": 16}}, "nameRange": {"start": {"line": 8, "character": 12}, "end": {"line": 8, "character": 16}}, "qname": "problems.36-valid-sudoku.solution:is_valid_sudoku.if (", "kind": "expression"},
    {"range": {"start": {"line": 10, "character": 16}, "end": {"line": 10, "character": 20}}, "nameRange": {"start": {"line": 10, "character": 16}, "end": {"line": 10, "character": 20}}, "qname": "problems.36-valid-sudoku.solution:is_valid_sudoku.if (", "kind": "expression"},
    {"range": {"start": {"line": 8, "character": 12}, "end": {"line": 8, "character": 41}}, "nameRange": {"start": {"line": 8, "character": 12}, "end": {"line": 8, "character": 41}}, "qname": "problems.36-valid-sudoku.solution:is_valid_sudoku.if (num := board[r][c]) != \".", "kind": "expression"},
    {"range": {"start": {"line": 13, "character": 36}, "end": {"line": 13, "character": 73}}, "nameRange": {"start": {"line": 13, "character": 36}, "end": {"line": 13, "character": 73}}, "qname": "problems.36-valid-sudoku.solution:is_valid_sudoku.cube_index := (r // 3) * 3 + (c // 3)", "kind": "expression"}
  ],
  "core/bellman-ford/classic.py": [
    {"range": {"start": {"line": 7, "character": 13}, "end": {"line": 7, "character": 25}}, "nameRange": {"start": {"line": 7, "character": 13}, "end": {"line": 7, "character": 25}}, "qname": "core.bellman-ford.classic:bellman_ford_classic.range(V - 1)", "kind": "expression"},
    {"range": {"start": {"line": 13, "character": 8}, "end": {"line": 13, "character": 22}}, "nameRange": {"start": {"line": 13, "character": 8}, "end": {"line": 13, "character": 22}}, "qname": "core.bellman-ford.classic:bellman_ford_classic.if not updated", "kind": "expression"}
  ],
  "core/binary-search/bisect_left.py": [
    {"range": {"start": {"line": 6, "character": 12}, "end": {"line": 6, "character": 23}}, "nameRange": {"start": {"line": 6, "character": 12}, "end": {"line": 6, "character": 23}}, "qname": "core.binary-search.bisect_left:simple_bisect_left.l = mid + 1", "kind": "expression"},
    {"range": {"start": {"line": 8, "character": 12}, "end": {"line": 8, "character": 19}}, "nameRange": {"start": {"line": 8, "character": 12}, "end": {"line": 8, "character": 19}}, "qname": "core.binary-search.bisect_left:simple_bisect_left.r = mid", "kind": "expression"}
  ],
  "core/binary-search/bisect_right.py": [
    {"range": {"start": {"line": 6, "character": 12}, "end": {"line": 6, "character": 19}}, "nameRange": {"start": {"line": 6, "character": 12}, "end": {"line": 6, "character": 19}}, "qname": "core.binary-search.bisect_right:simple_bisect_right.r = mid", "kind": "expression"},
    {"range": {"start": {"line": 8, "character": 12}, "end": {"line": 8, "character": 23}}, "nameRange": {"start": {"line": 8, "character": 12}, "end": {"line": 8, "character": 23}}, "qname": "core.binary-search.bisect_right:simple_bisect_right.l = mid + 1", "kind": "expression"}
  ]
}