{
  "maxSubArrayLen": {
    "name": "maxSubArrayLen",
    "type": "function",
    "language": "python",
    "file": "test-tooltips.py",
    "line": 1,
    "signature": "def maxSubArrayLen(nums: list[int], k: int) -> int:",
    "parameters": [
      { "name": "nums", "type": "list[int]", "description": "List of integers.", "default": null },
      { "name": "k", "type": "int", "description": "Target sum.", "default": null }
    ],
    "return_type": "int",
    "return_description": "The length of the longest subarray with sum == k.",
    "description": "Find the maximum length of a subarray that sums to exactly k.",
    "code": "def maxSubArrayLen(nums: list[int], k: int) -> int:\n    \"\"\"Find the maximum length of a subarray that sums to exactly k.\"\"\"\n    prefix_sum = {0: -1}\n    current_sum = 0\n    max_length = 0\n    \n    for i, num in enumerate(nums):\n        current_sum += num\n        if current_sum - k in prefix_sum:\n            max_length = max(max_length, i - prefix_sum[current_sum - k])\n        if current_sum not in prefix_sum:\n            prefix_sum[current_sum] = i\n    \n    return max_length"
  },
  "calculate_area": {
    "name": "calculate_area",
    "type": "function",
    "language": "python",
    "file": "test-tooltips.py",
    "line": 15,
    "signature": "def calculate_area(width: float, height: float) -> float:",
    "parameters": [
      { "name": "width", "type": "float", "description": "Width of the rectangle.", "default": null },
      { "name": "height", "type": "float", "description": "Height of the rectangle.", "default": null }
    ],
    "return_type": "float",
    "return_description": "Area of the rectangle.",
    "description": "Calculate the area of a rectangle.",
    "code": "def calculate_area(width: float, height: float) -> float:\n    \"\"\"Calculate the area of a rectangle.\"\"\"\n    return width * height"
  },
  "process_data": {
    "name": "process_data",
    "type": "function",
    "language": "python",
    "file": "test-tooltips.py",
    "line": 19,
    "signature": "def process_data(data: list[str], limit: int = 10) -> dict[str, int]:",
    "parameters": [
      { "name": "data", "type": "list[str]", "description": "List of strings to process.", "default": null },
      { "name": "limit", "type": "int", "description": "Maximum number of items to process.", "default": "10" }
    ],
    "return_type": "dict[str, int]",
    "return_description": "Frequency counts of items.",
    "description": "Process a list of strings and return frequency counts.",
    "code": "def process_data(data: list[str], limit: int = 10) -> dict[str, int]:\n    \"\"\"Process a list of strings and return frequency counts.\"\"\"\n    result = {}\n    for item in data[:limit]:\n        result[item] = result.get(item, 0) + 1\n    return result"
  },
  "Calculator": {
    "name": "Calculator",
    "type": "class",
    "language": "python",
    "file": "test-tooltips.py",
    "line": 25,
    "signature": "class Calculator:",
    "parameters": [],
    "return_type": null,
    "return_description": null,
    "description": "A simple calculator class.",
    "code": "class Calculator:\n    \"\"\"A simple calculator class.\"\"\"\n    \n    def __init__(self, initial_value: float = 0):\n        self.value = initial_value\n    \n    def add(self, x: float) -> float:\n        \"\"\"Add a number to the current value.\"\"\"\n        self.value += x\n        return self.value\n    \n    def multiply(self, x: float) -> float:\n        \"\"\"Multiply the current value by a number.\"\"\"\n        self.value *= x\n        return self.value"
  }
} 