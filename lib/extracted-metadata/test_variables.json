{
  "dijkstra": {
    "name": "dijkstra",
    "type": "function",
    "language": "python",
    "file": "examples/code/dijkstra.py",
    "line": 4,
    "signature": "def dijkstra(graph: dict[str, dict[str, int]], s: str):",
    "parameters": [
      {
        "name": "graph",
        "type": "dict[(str, dict[(str, int)])]",
        "description": "A dictionary representing the graph.",
        "default": null
      },
      {
        "name": "s",
        "type": "str",
        "description": "The source vertex.",
        "default": null
      }
    ],
    "return_type": "",
    "return_description": "",
    "description": "Dijkstra's algorithm for finding the shortest path in a non-negative weighted graph.",
    "code": "def dijkstra(graph: dict[str, dict[str, int]], s: str):\n    d = {v: float('inf') for v in graph} | {s: 0}\n    p = {v: None for v in graph}\n    pq = [(0, s)]\n    while pq:\n        d_u, u = heapq.heappop(pq)\n        if d_u > d[u]:\n            continue\n        for v ,w in graph[u]:\n            if (weight := d_u + w) < d[v]:\n                d[v], p[v] = weight, u\n                heapq.heappush(pq, (weight, v))\n    return d, p",
    "links": [],
    "variables": [
      {
        "name": "graph",
        "description": "A dictionary representing the graph.",
        "type": "variable"
      },
      {
        "name": "s",
        "description": "The source vertex.",
        "type": "variable"
      }
    ]
  },
  "networkDelayTime2": {
    "name": "networkDelayTime2",
    "type": "function",
    "language": "python",
    "file": "examples/code/dijkstra.py",
    "line": 34,
    "signature": "def networkDelayTime2(times: list[list[int]], n: int, k: int) -> int:",
    "parameters": [
      {
        "name": "times",
        "type": "list[list[int]]",
        "description": "",
        "default": null
      },
      {
        "name": "n",
        "type": "int",
        "description": "",
        "default": null
      },
      {
        "name": "k",
        "type": "int",
        "description": "",
        "default": null
      }
    ],
    "return_type": "int",
    "return_description": "",
    "description": "",
    "code": "def networkDelayTime2(times: list[list[int]], n: int, k: int) -> int:\n    graph = {v: [] for v in range(1, n + 1)}\n    for u, v, w in times:\n        graph[u].append((v, w))\n    d = {v: float(\"inf\") for v in graph} | {k: 0}\n    pq = [(0, k)]\n    while pq:\n        d_u, u = heapq.heappop(pq)\n        if d_u > d[u]:\n            continue\n        for v, w in graph[u]:\n            if (weight := d_u + w) < d[v]:\n                d[v] = weight\n                heapq.heappush(pq, (weight, v))\n    return m if (m := max(d.values())) != float(\"inf\") else -1",
    "links": [],
    "variables": []
  },
  "networkDelayTime": {
    "name": "networkDelayTime",
    "type": "function",
    "language": "python",
    "file": "examples/code/dijkstra.py",
    "line": 57,
    "signature": "def networkDelayTime(times: list[list[int]], n: int, k: int) -> int:",
    "parameters": [
      {
        "name": "times",
        "type": "list[list[int]]",
        "description": "list of lists of integers representing the edges and their weights",
        "default": null
      },
      {
        "name": "n",
        "type": "int",
        "description": "number of nodes",
        "default": null
      },
      {
        "name": "k",
        "type": "int",
        "description": "starting node",
        "default": null
      }
    ],
    "return_type": "int",
    "return_description": "minimum time for a signal starting at node `k` to reach *all* nodes or -1 if impossible",
    "description": "Given `n` nodes labeled `1` through `n` and directed travel times between them,",
    "code": "def networkDelayTime(times: list[list[int]], n: int, k: int) -> int:\n    adj = defaultdict(list)\n    for u, v, w in times:\n        adj[u].append((v, w))\n    pq, finalized, time = [(0, k)], set(), 0\n    while pq:\n        t, node = heapq.heappop(pq)\n        if node in finalized:\n            continue\n        finalized.add(node)\n        time = t\n        for neighbor, travel_time in adj[node]:\n            if neighbor not in finalized:\n                heapq.heappush(pq, (time + travel_time, neighbor))\n    return time if len(finalized) == n else -1",
    "links": [],
    "variables": [
      {
        "name": "times",
        "description": "list of lists of integers representing the edges and their weights",
        "type": "variable"
      },
      {
        "name": "n",
        "description": "number of nodes",
        "type": "variable"
      },
      {
        "name": "k",
        "description": "starting node",
        "type": "variable"
      }
    ]
  },
  "minimumEffortPath": {
    "name": "minimumEffortPath",
    "type": "function",
    "language": "python",
    "file": "examples/code/dijkstra.py",
    "line": 91,
    "signature": "def minimumEffortPath(heights: list[list[int]]) -> int:",
    "parameters": [
      {
        "name": "heights",
        "type": "list[list[int]]",
        "description": "2D list of integers representing the heights of the cells",
        "default": null
      }
    ],
    "return_type": "int",
    "return_description": "minimum effort to reach the bottom-right cell",
    "description": "Find a path from the top-left to the bottom-right of a height grid that minimizes the \"effort\".",
    "code": "def minimumEffortPath(heights: list[list[int]]) -> int:\n    R, C = len(heights), len(heights[0])\n    pq, resolved = [(0, 0, 0)], set()\n    while pq:\n        effort, r, c = heapq.heappop(pq)\n        if (r, c) in resolved: continue\n        if (r, c) == (R - 1, C - 1): return effort\n        resolved.add((r, c))\n        for nr, nc in [(r, c + 1), (r, c - 1), (r + 1, c), (r - 1, c)]:\n            if 0 <= nr < R and 0 <= nc < C and (nr, nc) not in resolved:\n                neighbor_effort = max(effort, abs(heights[nr][nc] - heights[r][c]))\n                heapq.heappush(pq, (neighbor_effort, nr, nc))",
    "links": [],
    "variables": [
      {
        "name": "pq",
        "description": "Priority queue stores (max_effort_on_path, r, c)",
        "type": "variable"
      },
      {
        "name": "resolved",
        "description": "set to store the positions that have been resolved",
        "type": "variable"
      },
      {
        "name": "heights",
        "description": "2D list of integers representing the heights of the cells",
        "type": "variable"
      }
    ]
  }
}