{
  "bellman_ford_classic": {
    "name": "bellman_ford_classic",
    "type": "function",
    "language": "python",
    "file": "examples/code/bellman-ford.py",
    "line": 3,
    "signature": "def bellman_ford_classic(vertices:list[str], edges:list[tuple[str, str, float]], source:str)->dict[str, float]:",
    "parameters": [
      {
        "name": "vertices",
        "type": "list[str]",
        "description": "",
        "default": null
      },
      {
        "name": "edges",
        "type": "list[tuple[(str, str, float)]]",
        "description": "",
        "default": null
      },
      {
        "name": "source",
        "type": "str",
        "description": "",
        "default": null
      }
    ],
    "return_type": "dict[(str, float)]",
    "return_description": "",
    "description": "Classic Bellman-Ford with early exit.",
    "code": "def bellman_ford_classic(vertices:list[str], edges:list[tuple[str, str, float]], source:str)->dict[str, float]:\n    d = [float(\"inf\")] * (V := len(vertices))\n    d[source] = 0\n    for _ in range(V - 1):\n        updated = False\n        for u, v, w in edges:\n            if d[u] + w < d[v]:\n                d[v] = d[u] + w\n                updated = True\n        if not updated:\n            return d    \n    for u, v, w in edges:\n        if d[u] + w < d[v]:\n            raise Exception(\"Negative-weight cycle\")\n    return d",
    "links": [
      {
        "symbol": "v",
        "display": "[v]",
        "target": "v",
        "valid": false,
        "target_symbol": null
      }
    ],
    "variables": []
  },
  "bellman_ford_layered_dag": {
    "name": "bellman_ford_layered_dag",
    "type": "function",
    "language": "python",
    "file": "examples/code/bellman-ford.py",
    "line": 31,
    "signature": "def bellman_ford_layered_dag(vertices: list[str], edges: list[tuple[str, str, float]], source: str) -> dict[str, float]:",
    "parameters": [
      {
        "name": "vertices",
        "type": "list[str]",
        "description": "All hashable vertex identifiers.",
        "default": null
      },
      {
        "name": "edges",
        "type": "list[tuple[(str, str, float)]]",
        "description": "Iterable of (u, v, weight) tuples.",
        "default": null
      },
      {
        "name": "source",
        "type": "str",
        "description": "Starting vertex.",
        "default": null
      }
    ],
    "return_type": "dict[(str, float)]",
    "return_description": "A dict mapping each vertex to its true shortest-path cost from `source`,",
    "description": "Compute k-edge shortest-path distances and detect negative cycles via layered relaxation.",
    "code": "def bellman_ford_layered_dag(vertices: list[str], edges: list[tuple[str, str, float]], source: str) -> dict[str, float]:\n    d = {v: float(\"inf\") for v in vertices}\n    d[source], V = 0, len(vertices)\n    for k in range(V):  \n        d_k = {**d}  \n        for u, v, w in edges:\n            if d[u] + w < d_k[v]:\n                d_k[v] = d[u] + w\n        d = d_k  \n    witnesses = {v for u, v, w in edges if d[u] + w < d[v]}\n    if not witnesses:\n        return d\n    adj = defaultdict(list)\n    for u, v, _ in edges:\n        adj[u].append(v)\n    stack = list(witnesses)\n    reachable = set(witnesses)\n    while stack:\n        u = stack.pop()\n        d[u] = float(\"-inf\")\n        for v in adj[u]:\n            if v not in reachable:\n                reachable.add(v)\n                stack.append(v)\n    return d",
    "links": [],
    "variables": []
  },
  "findCheapestPrice": {
    "name": "findCheapestPrice",
    "type": "function",
    "language": "python",
    "file": "examples/code/dijkstra.py",
    "line": 152,
    "signature": "def findCheapestPrice( flights: list[list[int]], src: int, dst: int, k: int) -> int:",
    "parameters": [
      {
        "name": "flights",
        "type": "list[list[int]]",
        "description": "",
        "default": null
      },
      {
        "name": "src",
        "type": "int",
        "description": "",
        "default": null
      },
      {
        "name": "dst",
        "type": "int",
        "description": "",
        "default": null
      },
      {
        "name": "k",
        "type": "int",
        "description": "",
        "default": null
      }
    ],
    "return_type": "int",
    "return_description": "",
    "description": "Variables:",
    "code": "def findCheapestPrice( flights: list[list[int]], src: int, dst: int, k: int) -> int:\n    graph = defaultdict(list)\n    for u, v, price in flights:\n        graph[u].append((v, price))\n    pq, min_stops = [(0, src, 0)], {}\n    while pq:\n        cost, city, stops = heapq.heappop(pq)\n        if stops > min_stops.get(city, float(\"inf\")): continue\n        if city == dst: return cost\n        min_stops[city] = stops\n        if stops <= k:\n            for neighbor, price in graph[city]:\n                heapq.heappush(pq, (cost + price, neighbor, stops + 1))\n    return -1",
    "links": [],
    "variables": [
      {
        "name": "pq",
        "description": "Priority queue to store the state (cost, city, stops_taken)",
        "type": "variable"
      },
      {
        "name": "min_stops",
        "description": "Tracks the minimum stops to reach each city",
        "type": "variable"
      }
    ]
  },
  "maxProbability": {
    "name": "maxProbability",
    "type": "function",
    "language": "python",
    "file": "examples/code/bellman-ford.py",
    "line": 102,
    "signature": "def maxProbability(n: int, edges: list[list[int]], succProb: list[float], start: int, end: int) -> float:",
    "parameters": [
      {
        "name": "n",
        "type": "int",
        "description": "number of nodes",
        "default": null
      },
      {
        "name": "edges",
        "type": "list[list[int]]",
        "description": "edges[i] = [u, v] is an undirected edge connecting the nodes u and v with a probability of success of traversing that edge succProb[i].",
        "default": null
      },
      {
        "name": "succProb",
        "type": "list[float]",
        "description": "list of probabilities, e.g. [0.5,0.5,0.2],",
        "default": null
      },
      {
        "name": "start",
        "type": "int",
        "description": "start node",
        "default": null
      },
      {
        "name": "end",
        "type": "int",
        "description": "end node",
        "default": null
      }
    ],
    "return_type": "float",
    "return_description": "",
    "description": "Bellman-Ford variant to maximize product of probabilities.",
    "code": "def maxProbability(n: int, edges: list[list[int]], succProb: list[float], start: int, end: int) -> float:\n    prob[start] = 1.0  \n    for _ in range(n - 1):  \n        updated = False\n        for (u, v), p in zip(edges, succProb):\n            if prob[u] * p > prob[v]:  \n                prob[v] = prob[u] * p\n                updated = True\n            if prob[v] * p > prob[u]:  \n                prob[u] = prob[v] * p\n                updated = True\n        if not updated:\n            break  \n    return prob[end]",
    "links": [
      {
        "symbol": "i",
        "display": "[i]",
        "target": "i",
        "valid": false,
        "target_symbol": null
      },
      {
        "symbol": "i",
        "display": "[i]",
        "target": "i",
        "valid": false,
        "target_symbol": null
      },
      {
        "symbol": "i",
        "display": "[i]",
        "target": "i",
        "valid": false,
        "target_symbol": null
      },
      {
        "symbol": "start",
        "display": "[start]",
        "target": "start",
        "valid": false,
        "target_symbol": null
      },
      {
        "symbol": "end",
        "display": "[end]",
        "target": "end",
        "valid": false,
        "target_symbol": null
      }
    ],
    "variables": []
  },
  "dijkstra": {
    "name": "dijkstra",
    "type": "function",
    "language": "python",
    "file": "examples/code/dijkstra.py",
    "line": 4,
    "signature": "def dijkstra(graph: dict[str, dict[str, int]], s: str):",
    "parameters": [
      {
        "name": "graph",
        "type": "dict[(str, dict[(str, int)])]",
        "description": "A dictionary representing the graph.",
        "default": null
      },
      {
        "name": "s",
        "type": "str",
        "description": "The source vertex.",
        "default": null
      }
    ],
    "return_type": "",
    "return_description": "",
    "description": "Dijkstra's algorithm for finding the shortest path in a non-negative weighted graph.",
    "code": "def dijkstra(graph: dict[str, dict[str, int]], s: str):\n    d = {v: float('inf') for v in graph} | {s: 0}\n    p = {v: None for v in graph}\n    pq = [(0, s)]\n    while pq:\n        d_u, u = heapq.heappop(pq)\n        if d_u > d[u]:\n            continue\n        for v ,w in graph[u]:\n            if (weight := d_u + w) < d[v]:\n                d[v], p[v] = weight, u\n                heapq.heappush(pq, (weight, v))\n    return d, p",
    "links": [],
    "variables": []
  },
  "networkDelayTime2": {
    "name": "networkDelayTime2",
    "type": "function",
    "language": "python",
    "file": "examples/code/dijkstra.py",
    "line": 34,
    "signature": "def networkDelayTime2(times: list[list[int]], n: int, k: int) -> int:",
    "parameters": [
      {
        "name": "times",
        "type": "list[list[int]]",
        "description": "",
        "default": null
      },
      {
        "name": "n",
        "type": "int",
        "description": "",
        "default": null
      },
      {
        "name": "k",
        "type": "int",
        "description": "",
        "default": null
      }
    ],
    "return_type": "int",
    "return_description": "",
    "description": "",
    "code": "def networkDelayTime2(times: list[list[int]], n: int, k: int) -> int:\n    graph = {v: [] for v in range(1, n + 1)}\n    for u, v, w in times:\n        graph[u].append((v, w))\n    d = {v: float(\"inf\") for v in graph} | {k: 0}\n    pq = [(0, k)]\n    while pq:\n        d_u, u = heapq.heappop(pq)\n        if d_u > d[u]:\n            continue\n        for v, w in graph[u]:\n            if (weight := d_u + w) < d[v]:\n                d[v] = weight\n                heapq.heappush(pq, (weight, v))\n    return m if (m := max(d.values())) != float(\"inf\") else -1",
    "links": [],
    "variables": []
  },
  "networkDelayTime": {
    "name": "networkDelayTime",
    "type": "function",
    "language": "python",
    "file": "examples/code/dijkstra.py",
    "line": 57,
    "signature": "def networkDelayTime(times: list[list[int]], n: int, k: int) -> int:",
    "parameters": [
      {
        "name": "times",
        "type": "list[list[int]]",
        "description": "list of lists of integers representing the edges and their weights",
        "default": null
      },
      {
        "name": "n",
        "type": "int",
        "description": "number of nodes",
        "default": null
      },
      {
        "name": "k",
        "type": "int",
        "description": "starting node",
        "default": null
      }
    ],
    "return_type": "int",
    "return_description": "minimum time for a signal starting at node `k` to reach *all* nodes or -1 if impossible",
    "description": "Given `n` nodes labeled `1` through `n` and directed travel times between them,",
    "code": "def networkDelayTime(times: list[list[int]], n: int, k: int) -> int:\n    adj = defaultdict(list)\n    for u, v, w in times:\n        adj[u].append((v, w))\n    pq, finalized, time = [(0, k)], set(), 0\n    while pq:\n        t, node = heapq.heappop(pq)\n        if node in finalized:\n            continue\n        finalized.add(node)\n        time = t\n        for neighbor, travel_time in adj[node]:\n            if neighbor not in finalized:\n                heapq.heappush(pq, (time + travel_time, neighbor))\n    return time if len(finalized) == n else -1",
    "links": [],
    "variables": []
  },
  "minimumEffortPath": {
    "name": "minimumEffortPath",
    "type": "function",
    "language": "python",
    "file": "examples/code/dijkstra.py",
    "line": 91,
    "signature": "def minimumEffortPath(heights: list[list[int]]) -> int:",
    "parameters": [
      {
        "name": "heights",
        "type": "list[list[int]]",
        "description": "2D list of integers representing the heights of the cells",
        "default": null
      }
    ],
    "return_type": "int",
    "return_description": "minimum effort to reach the bottom-right cell",
    "description": "Find a path from the top-left to the bottom-right of a height grid that minimizes the \"effort\".",
    "code": "def minimumEffortPath(heights: list[list[int]]) -> int:\n    R, C = len(heights), len(heights[0])\n    pq, resolved = [(0, 0, 0)], set()\n    while pq:\n        effort, r, c = heapq.heappop(pq)\n        if (r, c) in resolved: continue\n        if (r, c) == (R - 1, C - 1): return effort\n        resolved.add((r, c))\n        for nr, nc in [(r, c + 1), (r, c - 1), (r + 1, c), (r - 1, c)]:\n            if 0 <= nr < R and 0 <= nc < C and (nr, nc) not in resolved:\n                neighbor_effort = max(effort, abs(heights[nr][nc] - heights[r][c]))\n                heapq.heappush(pq, (neighbor_effort, nr, nc))",
    "links": [],
    "variables": [
      {
        "name": "pq",
        "description": "Priority queue stores (max_effort_on_path, r, c)",
        "type": "variable"
      },
      {
        "name": "resolved",
        "description": "set to store the positions that have been resolved",
        "type": "variable"
      }
    ]
  },
  "swimInWater": {
    "name": "swimInWater",
    "type": "function",
    "language": "python",
    "file": "examples/code/dijkstra.py",
    "line": 120,
    "signature": "def swimInWater(grid: list[list[int]]) -> int:",
    "parameters": [
      {
        "name": "grid",
        "type": "list[list[int]]",
        "description": "2D list of integers representing the elevations of the cells",
        "default": null
      }
    ],
    "return_type": "int",
    "return_description": "minimum time to travel from `(0, 0)` to `(N-1, N-1)`",
    "description": "You are given an `N x N` grid of elevations. Find the minimum \"time\" `t` to travel from `(0, 0)` to `(N-1, N-1)`.",
    "code": "def swimInWater(grid: list[list[int]]) -> int:\n    n=len(grid)\n    pq, resolved = [(grid[0][0], 0, 0)], set()\n    while pq:\n        time, r, c = heapq.heappop(pq)\n        if (r, c) in resolved:continue\n        if (r, c) == (n - 1, n - 1):return time\n        resolved.add((r, c))\n        for nr, nc in [(r, c + 1), (r, c - 1), (r + 1, c), (r - 1, c)]:\n            if 0 <= nr < n and 0 <= nc < n and (nr, nc) not in resolved:\n                bottleneck_time = max(time, grid[nr][nc])\n                heapq.heappush(pq, (bottleneck_time, nr, nc))",
    "links": [],
    "variables": [
      {
        "name": "pq",
        "description": "Priority queue stores (max_elevation_on_path, r, c)",
        "type": "variable"
      },
      {
        "name": "resolved",
        "description": "set to store the cells for which we have found the minimum time required to reach them",
        "type": "variable"
      }
    ]
  },
  "LRUCache": {
    "name": "LRUCache",
    "type": "class",
    "language": "python",
    "file": "examples/code/cache.py",
    "line": 4,
    "signature": "class LRUCache:",
    "parameters": [],
    "return_type": "",
    "return_description": "",
    "description": "",
    "code": "class LRUCache:\n    def __init__(self, capacity: int):\n        self.cache: OrderedDict[int, int] = OrderedDict()\n        self.capacity = capacity\n\n    def get(self, key: int) -> int:\n        if (val := self.cache.get(key)) is None:\n            return -1\n        self.cache.move_to_end(key)\n        return val\n\n    def put(self, key: int, value: int) -> None:\n        if key in self.cache:\n            self.cache.move_to_end(key)\n        self.cache[key] = value\n        if len(self.cache) > self.capacity:\n            self.cache.popitem(last=False)",
    "links": [],
    "variables": []
  },
  "LRUCache.__init__": {
    "name": "__init__",
    "type": "method",
    "language": "python",
    "file": "examples/code/cache.py",
    "line": 5,
    "signature": "def __init__(self, capacity: int):",
    "parameters": [
      {
        "name": "capacity",
        "type": "int",
        "description": "",
        "default": null
      }
    ],
    "return_type": "",
    "return_description": "",
    "description": "",
    "code": "def __init__(self, capacity: int):\n        self.cache: OrderedDict[int, int] = OrderedDict()\n        self.capacity = capacity",
    "links": [],
    "variables": [],
    "parent": "LRUCache"
  },
  "LRUCache.get": {
    "name": "get",
    "type": "method",
    "language": "python",
    "file": "examples/code/cache.py",
    "line": 9,
    "signature": "def get(self, key: int) -> int:",
    "parameters": [
      {
        "name": "key",
        "type": "int",
        "description": "",
        "default": null
      }
    ],
    "return_type": "int",
    "return_description": "",
    "description": "",
    "code": "def get(self, key: int) -> int:\n        if (val := self.cache.get(key)) is None:\n            return -1\n        self.cache.move_to_end(key)\n        return val",
    "links": [],
    "variables": [],
    "parent": "LRUCache"
  },
  "LRUCache.put": {
    "name": "put",
    "type": "method",
    "language": "python",
    "file": "examples/code/cache.py",
    "line": 15,
    "signature": "def put(self, key: int, value: int) -> None:",
    "parameters": [
      {
        "name": "key",
        "type": "int",
        "description": "",
        "default": null
      },
      {
        "name": "value",
        "type": "int",
        "description": "",
        "default": null
      }
    ],
    "return_type": "None",
    "return_description": "",
    "description": "",
    "code": "def put(self, key: int, value: int) -> None:\n        if key in self.cache:\n            self.cache.move_to_end(key)\n        self.cache[key] = value\n        if len(self.cache) > self.capacity:\n            self.cache.popitem(last=False)",
    "links": [],
    "variables": [],
    "parent": "LRUCache"
  },
  "LFUCache": {
    "name": "LFUCache",
    "type": "class",
    "language": "python",
    "file": "examples/code/cache.py",
    "line": 24,
    "signature": "class LFUCache:",
    "parameters": [],
    "return_type": "",
    "return_description": "",
    "description": "",
    "code": "class LFUCache:\n    def __init__(self, capacity: int):\n        self.capacity    = capacity\n        self.cache       = {}  \n        self.freq        = {}  \n        \n        self.buckets     = defaultdict(OrderedDict)  \n        self.minfreq     = 0\n\n    def _bump(self, key: int):\n        \"\"\"Move key from freq f to f+1.\"\"\"\n        f = self.freq[key]\n        \n        del self.buckets[f][key]\n        if not self.buckets[f]:\n            del self.buckets[f]\n            if self.minfreq == f:\n                self.minfreq += 1\n        \n        self.freq[key] +=1 \n        self.buckets[f + 1][key] = None\n\n    def get(self, key: int) -> int:\n        if key not in self.cache:\n            return -1\n        self._bump(key)\n        return self.cache[key]\n\n    def put(self, key: int, value: int) -> None:\n        if self.capacity <= 0:\n            return\n\n        if key in self.cache:\n            self.cache[key] = value\n            self._bump(key)\n            return\n\n        \n        if len(self.cache) >= self.capacity:\n            old_key, _ = self.buckets[self.minfreq].popitem(last=False)\n            del self.cache[old_key]\n            del self.freq[old_key]\n\n        \n        self.cache[key] = value\n        self.freq[key] = 1\n        self.buckets[1][key] = None\n        self.minfreq = 1",
    "links": [],
    "variables": []
  },
  "LFUCache.__init__": {
    "name": "__init__",
    "type": "method",
    "language": "python",
    "file": "examples/code/cache.py",
    "line": 25,
    "signature": "def __init__(self, capacity: int):",
    "parameters": [
      {
        "name": "capacity",
        "type": "int",
        "description": "",
        "default": null
      }
    ],
    "return_type": "",
    "return_description": "",
    "description": "",
    "code": "def __init__(self, capacity: int):\n        self.capacity    = capacity\n        self.cache       = {}  \n        self.freq        = {}  \n        self.buckets     = defaultdict(OrderedDict)  \n        self.minfreq     = 0",
    "links": [],
    "variables": [],
    "parent": "LFUCache"
  },
  "LFUCache._bump": {
    "name": "_bump",
    "type": "method",
    "language": "python",
    "file": "examples/code/cache.py",
    "line": 33,
    "signature": "def _bump(self, key: int):",
    "parameters": [
      {
        "name": "key",
        "type": "int",
        "description": "",
        "default": null
      }
    ],
    "return_type": "",
    "return_description": "",
    "description": "Move key from freq f to f+1.",
    "code": "def _bump(self, key: int):\n        del self.buckets[f][key]\n        if not self.buckets[f]:\n            del self.buckets[f]\n            if self.minfreq == f:\n                self.minfreq += 1\n        self.freq[key] +=1 \n        self.buckets[f + 1][key] = None",
    "links": [],
    "variables": [],
    "parent": "LFUCache"
  },
  "LFUCache.get": {
    "name": "get",
    "type": "method",
    "language": "python",
    "file": "examples/code/cache.py",
    "line": 46,
    "signature": "def get(self, key: int) -> int:",
    "parameters": [
      {
        "name": "key",
        "type": "int",
        "description": "",
        "default": null
      }
    ],
    "return_type": "int",
    "return_description": "",
    "description": "",
    "code": "def get(self, key: int) -> int:\n        if key not in self.cache:\n            return -1\n        self._bump(key)\n        return self.cache[key]",
    "links": [],
    "variables": [],
    "parent": "LFUCache"
  },
  "LFUCache.put": {
    "name": "put",
    "type": "method",
    "language": "python",
    "file": "examples/code/cache.py",
    "line": 52,
    "signature": "def put(self, key: int, value: int) -> None:",
    "parameters": [
      {
        "name": "key",
        "type": "int",
        "description": "",
        "default": null
      },
      {
        "name": "value",
        "type": "int",
        "description": "",
        "default": null
      }
    ],
    "return_type": "None",
    "return_description": "",
    "description": "",
    "code": "def put(self, key: int, value: int) -> None:\n        if self.capacity <= 0:\n            return\n        if key in self.cache:\n            self.cache[key] = value\n            self._bump(key)\n            return\n        if len(self.cache) >= self.capacity:\n            old_key, _ = self.buckets[self.minfreq].popitem(last=False)\n            del self.cache[old_key]\n            del self.freq[old_key]\n        self.cache[key] = value\n        self.freq[key] = 1\n        self.buckets[1][key] = None\n        self.minfreq = 1",
    "links": [],
    "variables": [],
    "parent": "LFUCache"
  },
  "Solution": {
    "name": "Solution",
    "type": "class",
    "language": "python",
    "file": "examples/code/stack.py",
    "line": 1,
    "signature": "class Solution:",
    "parameters": [],
    "return_type": "",
    "return_description": "",
    "description": "",
    "code": "class Solution:\n    def decodeString(self, s: str) -> str:\n        stack, s = [], \"1[\" + s + \"]\"\n        for c in s:\n            if c == \"]\":\n                curr = []\n                while stack[-1] != \"[\":\n                    curr.append(stack.pop())\n                stack.pop()  \n                num = []\n                while stack and stack[-1].isdigit():\n                    num.append(stack.pop())\n                stack.append(\"\".join(reversed(curr)) * int(\"\".join(reversed(num))))\n            else:\n                stack.append(c)\n        return stack[0]",
    "links": [],
    "variables": []
  },
  "Solution.decodeString": {
    "name": "decodeString",
    "type": "method",
    "language": "python",
    "file": "examples/code/stack.py",
    "line": 2,
    "signature": "def decodeString(self, s: str) -> str:",
    "parameters": [
      {
        "name": "s",
        "type": "str",
        "description": "",
        "default": null
      }
    ],
    "return_type": "str",
    "return_description": "",
    "description": "",
    "code": "def decodeString(self, s: str) -> str:\n        stack, s = [], \"1[\" + s + \"]\"\n        for c in s:\n            if c == \"]\":\n                curr = []\n                while stack[-1] != \"[\":\n                    curr.append(stack.pop())\n                stack.pop()  \n                num = []\n                while stack and stack[-1].isdigit():\n                    num.append(stack.pop())\n                stack.append(\"\".join(reversed(curr)) * int(\"\".join(reversed(num))))\n            else:\n                stack.append(c)\n        return stack[0]",
    "links": [],
    "variables": [],
    "parent": "Solution"
  },
  "mod": {
    "name": "mod",
    "type": "function",
    "language": "python",
    "file": "examples/code/modular-arithmetic.py",
    "line": 1,
    "signature": "def mod(a: int, b: int) -> int:",
    "parameters": [
      {
        "name": "a",
        "type": "int",
        "description": "the first number1",
        "default": null
      },
      {
        "name": "b",
        "type": "int",
        "description": "the second number",
        "default": null
      }
    ],
    "return_type": "int",
    "return_description": "int",
    "description": "a mod b",
    "code": "def mod(a: int, b: int) -> int:",
    "links": [],
    "variables": []
  },
  "congruent1": {
    "name": "congruent1",
    "type": "function",
    "language": "python",
    "file": "examples/code/modular-arithmetic.py",
    "line": 14,
    "signature": "def congruent1(a: int, b: int, n: int) -> bool:",
    "parameters": [
      {
        "name": "a",
        "type": "int",
        "description": "the first number2",
        "default": null
      },
      {
        "name": "b",
        "type": "int",
        "description": "the second number",
        "default": null
      },
      {
        "name": "n",
        "type": "int",
        "description": "the modulus, the number by which we are dividing",
        "default": null
      }
    ],
    "return_type": "bool",
    "return_description": "bool",
    "description": "a ≡ b (mod n)",
    "code": "def congruent1(a: int, b: int, n: int) -> bool:",
    "links": [],
    "variables": []
  },
  "congruent2": {
    "name": "congruent2",
    "type": "function",
    "language": "python",
    "file": "examples/code/modular-arithmetic.py",
    "line": 27,
    "signature": "def congruent2(a: int, b: int, n: int) -> bool:",
    "parameters": [
      {
        "name": "a",
        "type": "int",
        "description": "the first number3",
        "default": null
      },
      {
        "name": "b",
        "type": "int",
        "description": "the second number",
        "default": null
      },
      {
        "name": "n",
        "type": "int",
        "description": "the modulus, the number by which we are dividing",
        "default": null
      }
    ],
    "return_type": "bool",
    "return_description": "bool",
    "description": "a ≡ b (mod n)",
    "code": "def congruent2(a: int, b: int, n: int) -> bool:",
    "links": [],
    "variables": []
  },
  "maxSubArrayLen": {
    "name": "maxSubArrayLen",
    "type": "function",
    "language": "python",
    "file": "examples/code/prefix_sum.py",
    "line": 3,
    "signature": "def maxSubArrayLen(segments: list[int], k: int) -> int:",
    "parameters": [
      {
        "name": "segments",
        "type": "list[int]",
        "description": "List of integers representing trip segments.",
        "default": null
      },
      {
        "name": "k",
        "type": "int",
        "description": "Target sum.",
        "default": null
      }
    ],
    "return_type": "int",
    "return_description": "The length of the longest subarray with sum == k.",
    "description": "Find the maximum length of a subarray that sums to exactly k.",
    "code": "def maxSubArrayLen(segments: list[int], k: int) -> int:\n    marker_idx = {0: -1}\n    prefix_sum = max_length = 0\n    for i, segment in enumerate(segments):\n        prefix_sum += segment\n        if (target_marker := prefix_sum - k) in marker_idx:\n            max_length = max(max_length, i - marker_idx[target_marker])\n        if prefix_sum not in marker_idx:\n            marker_idx[prefix_sum] = i\n    return max_length",
    "links": [],
    "variables": []
  },
  "subarraySum": {
    "name": "subarraySum",
    "type": "function",
    "language": "python",
    "file": "examples/code/prefix_sum.py",
    "line": 30,
    "signature": "def subarraySum(segments: list[int], k: int) -> int:",
    "parameters": [
      {
        "name": "segments",
        "type": "list[int]",
        "description": "List of integers representing trip segments.",
        "default": null
      },
      {
        "name": "k",
        "type": "int",
        "description": "Target sum.",
        "default": null
      }
    ],
    "return_type": "int",
    "return_description": "The count of subarrays with sum == k.",
    "description": "Count the number of subarrays that sum to exactly k.",
    "code": "def subarraySum(segments: list[int], k: int) -> int:\n    marker_frequency = defaultdict(int, {0: 1})\n    prefix_sum = count = 0\n    for segment in segments:\n        prefix_sum += segment\n        count += marker_frequency[prefix_sum - k]\n        marker_frequency[prefix_sum] += 1\n    return count",
    "links": [],
    "variables": []
  },
  "findMaxLength": {
    "name": "findMaxLength",
    "type": "function",
    "language": "python",
    "file": "examples/code/prefix_sum.py",
    "line": 52,
    "signature": "def findMaxLength(segments: list[int]) -> int:",
    "parameters": [
      {
        "name": "segments",
        "type": "list[int]",
        "description": "List of integers (positive for forward, negative/zero for backward).",
        "default": null
      }
    ],
    "return_type": "int",
    "return_description": "The length of the longest balanced subarray.",
    "description": "Find the maximum length of a contiguous subarray with an equal number of positive and negative values.",
    "code": "def findMaxLength(segments: list[int]) -> int:\n    return maxSubArrayLen(normalized_segments, 0)",
    "links": [],
    "variables": []
  },
  "checkSubarraySum": {
    "name": "checkSubarraySum",
    "type": "function",
    "language": "python",
    "file": "examples/code/prefix_sum.py",
    "line": 65,
    "signature": "def checkSubarraySum(segments: list[int], k: int) -> bool:",
    "parameters": [
      {
        "name": "segments",
        "type": "list[int]",
        "description": "List of integers representing trip segments.",
        "default": null
      },
      {
        "name": "k",
        "type": "int",
        "description": "The divisor.",
        "default": null
      }
    ],
    "return_type": "bool",
    "return_description": "True if such a subarray exists, False otherwise.",
    "description": "Check if the array contains a subarray of at least length 2 whose sum is a multiple of k.",
    "code": "def checkSubarraySum(segments: list[int], k: int) -> bool:\n    remainder_idx = {0: -1}\n    prefix_remainder = 0\n    for i, segment in enumerate(segments):\n        prefix_remainder = (prefix_remainder + segment) % k\n        if prefix_remainder in remainder_idx:\n            if i - remainder_idx[prefix_remainder] > 1:\n                return True\n        else:\n            remainder_idx[prefix_remainder] = i\n    return False",
    "links": [],
    "variables": []
  },
  "subarraysDivByK": {
    "name": "subarraysDivByK",
    "type": "function",
    "language": "python",
    "file": "examples/code/prefix_sum.py",
    "line": 89,
    "signature": "def subarraysDivByK(segments: list[int], k: int) -> int:",
    "parameters": [
      {
        "name": "segments",
        "type": "list[int]",
        "description": "List of integers representing trip segments.",
        "default": null
      },
      {
        "name": "k",
        "type": "int",
        "description": "The divisor.",
        "default": null
      }
    ],
    "return_type": "int",
    "return_description": "The count of subarrays with sum divisible by k.",
    "description": "Count the number of subarrays whose sum is divisible by k.",
    "code": "def subarraysDivByK(segments: list[int], k: int) -> int:\n    remainder_frequency = defaultdict(int, {0: 1})\n    prefix_remainder = count = 0\n    for segment in segments:\n        prefix_remainder = (prefix_remainder + segment) % k\n        count += remainder_frequency[prefix_remainder]\n        remainder_frequency[prefix_remainder] += 1\n    return count",
    "links": [],
    "variables": []
  },
  "minSubarray": {
    "name": "minSubarray",
    "type": "function",
    "language": "python",
    "file": "examples/code/prefix_sum.py",
    "line": 110,
    "signature": "def minSubarray(segments: list[int], p: int) -> int:",
    "parameters": [
      {
        "name": "segments",
        "type": "list[int]",
        "description": "List of integers representing trip segments.",
        "default": null
      },
      {
        "name": "p",
        "type": "int",
        "description": "The divisor.",
        "default": null
      }
    ],
    "return_type": "int",
    "return_description": "The length of the shortest subarray to remove, or -1 if not possible.",
    "description": "Find the length of the shortest subarray to remove so that the sum of the remaining elements is divisible by p.",
    "code": "def minSubarray(segments: list[int], p: int) -> int:\n    total_remainder = sum(segments) % p\n    if total_remainder == 0:\n        return 0\n    remainder_idx = {0: -1}\n    prefix_remainder, min_length = 0, len(segments)\n    for i, segment in enumerate(segments):\n        prefix_remainder = (prefix_remainder + segment) % p\n        need = (prefix_remainder - total_remainder + p) % p\n        if need in remainder_idx:\n            min_length = min(min_length, i - remainder_idx[need])\n        remainder_idx[prefix_remainder] = i\n    return min_length if min_length < len(segments) else -1",
    "links": [],
    "variables": []
  },
  "getModifiedArray": {
    "name": "getModifiedArray",
    "type": "function",
    "language": "python",
    "file": "examples/code/prefix_sum.py",
    "line": 138,
    "signature": "def getModifiedArray(length: int, updates: list[list[int]]) -> list[int]:",
    "parameters": [
      {
        "name": "length",
        "type": "int",
        "description": "The number of days in the itinerary.",
        "default": null
      },
      {
        "name": "updates",
        "type": "list[list[int]]",
        "description": "List of [start_day, end_day, change_in_km] updates.",
        "default": null
      }
    ],
    "return_type": "list[int]",
    "return_description": "The final daily travel plan after all updates.",
    "description": "Apply a list of range updates to an array and return the modified array.",
    "code": "def getModifiedArray(length: int, updates: list[list[int]]) -> list[int]:\n    delta = [0] * (length + 1)\n    for start_day, end_day, change_in_km in updates:\n        delta[start_day] += change_in_km\n        delta[end_day + 1] -= change_in_km\n    prefix_sum = 0\n    return [prefix_sum := prefix_sum + change for change in delta[:-1]]",
    "links": [],
    "variables": []
  },
  "numberOfArrays": {
    "name": "numberOfArrays",
    "type": "function",
    "language": "python",
    "file": "examples/code/prefix_sum.py",
    "line": 159,
    "signature": "def numberOfArrays(differences: list[int], lower: int, upper: int) -> int:",
    "parameters": [
      {
        "name": "differences",
        "type": "list[int]",
        "description": "List of daily changes (trip segments).",
        "default": null
      },
      {
        "name": "lower",
        "type": "int",
        "description": "Lower bound for any marker on the highway.",
        "default": null
      },
      {
        "name": "upper",
        "type": "int",
        "description": "Upper bound for any marker on the highway.",
        "default": null
      }
    ],
    "return_type": "int",
    "return_description": "The number of valid starting values.",
    "description": "Count the number of valid starting values for a hidden sequence given the differences and bounds.",
    "code": "def numberOfArrays(differences: list[int], lower: int, upper: int) -> int:\n    prefix_sum = min_marker = max_marker = 0\n    for diff in differences:\n        prefix_sum += diff\n        min_marker = min(min_marker, prefix_sum)\n        max_marker = max(max_marker, prefix_sum)\n    return max(0, (upper - max_marker) - (lower - min_marker) + 1)",
    "links": [],
    "variables": []
  }
}